dscc$dr2 <- ((dscc$mass1 - dscc$mass2)/dscc$mass0)*100
dscc$dr3 <- ((dscc$mass2 - dscc$mass3)/dscc$mass0)*100
dscc$dr4 <- ((dscc$mass3 - dscc$mass4)/dscc$mass0)*100
# Calculate total desiccation as percent of body mass for the whole experimentation period: (mass0 - mass4)/mass0 and make new column drt (desiccation rate total)
dscc$drt <- ((dscc$mass0 - dscc$mass4)/dscc$mass0)*100
# Filter only frogs and eliminate NAs from genus and drt
dscc <- dscc %>% filter(genus != "#N/A" & order == "Anura" & drt != "NA")
# Scatterplot of desiccation by mass
ggplot(dscc, mapping = aes(x = mass0, y = drt, color = genus)) + geom_point()+ labs(x= "Standard body mass at 100% hydration (g)", y = "Total water loss (% body mass)", color = "Genus") + theme_bw()
#_______________________________
# Log tranformation of initial body mass
dscc$log_mass0 <- log10(dscc$mass0)
# Scatter plot of log of initial mass and desiccation (% body mass)
ggplot(dscc, mapping = aes(x = log_mass0, y = drt)) + geom_point()+ labs(x= "Log of standard body mass at 100% hydration (g)", y = "Total water loss (% body mass)", color = "Genus") + theme_bw() + geom_smooth(method = "lm") + geom_point(aes(x = log_mass0, y = drt, color = genus))
# Linear model using log of body mass
lm_log1 <- lm(log_mass0 ~ drt, data = dscc)
summary(lm_log1)
plot(lm_log1)
#log tranformation of drt -> looks worse than the log of body mass
dscc$log_drt <- log10(dscc$drt)
ggplot(dscc, mapping = aes(x = mass0, y = log_drt, color = genus)) + geom_point()+ labs(x= "Standard body mass at 100% hydration (g)", y = "Log of total water loss (% body mass)", color = "Genus") + theme_bw()
ggplot(dscc, mapping = aes(x = mass0, y = log_drt, color = genus)) + geom_point()+ labs(x= "Standard body mass at 100% hydration (g)", y = "Log of total water loss (% body mass)", color = "Genus") + theme_bw() + geom_smooth(method = "lm")
ggplot(dscc, mapping = aes(x = mass0, y = log_drt)) + geom_point()+ labs(x= "Standard body mass at 100% hydration (g)", y = "Log of total water loss (% body mass)", color = "Genus") + theme_bw() + geom_smooth(method = "lm")
ggplot(dscc, mapping = aes(x = mass0, y = log_drt)) + geom_point()+ labs(x= "Standard body mass at 100% hydration (g)", y = "Log of total water loss (% body mass)", color = "Genus") + theme_bw() + geom_smooth(method = "lm") + geom_point(x = mass0, y = log_drt, color = genus)
ggplot(dscc, mapping = aes(x = mass0, y = log_drt)) + geom_point()+ labs(x= "Standard body mass at 100% hydration (g)", y = "Log of total water loss (% body mass)", color = "Genus") + theme_bw() + geom_smooth(method = "lm") + geom_point(aes(x = mass0, y = log_drt, color = genus))
lm_log2 <- lm(mass0 ~ log_drt, data = dscc)
summary(lm_log2)
plot(lm_log2)
# Scatter plot of log of initial mass and desiccation (% body mass)
ggplot(dscc, mapping = aes(x = log_mass0, y = drt)) + geom_point()+ labs(x= "Log of standard body mass at 100% hydration (g)", y = "Total water loss (% body mass)", color = "Genus") + theme_bw() + geom_smooth(method = "lm") + geom_point(aes(x = log_mass0, y = drt, color = genus))
# Scatterplot of desiccation by mass
ggplot(dscc, mapping = aes(x = mass0, y = drt, color = genus)) + geom_point()+ labs(x= "Standard body mass at 100% hydration (g)", y = "Total water loss (% body mass)", color = "Genus") + theme_bw()
install.packages("CoordinateCleaner")
library(countrycode)
library(CoordinateCleaner)
library(dplyr)
library(ggplot2)
library(rgbif)
library(sp)
install.packages("countrycode")
# Load libraries
library(countrycode)
library(CoordinateCleaner)
library(dplyr)
library(ggplot2)
library(rgbif)
library(sp)
gbif <- read.csv("1frog_coordinates_GBIF.csv")
setwd("~/GitHub/finalproject/Final_Project")
gbif <- read.csv("1frog_coordinates_GBIF.csv")
# Select columns of interest
gbif <- gbif %>%
dplyr::select(species, decimalLongitude, decimalLatitude, countryCode, individualCount,
gbifID, family, taxonRank, coordinateUncertaintyInMeters, year,
basisOfRecord, institutionCode, datasetName)
# Select columns of interest
gbif <- gbif %>% select(species, decimalLongitude, decimalLatitude, countryCode, individualCount,
gbifID, family, taxonRank, coordinateUncertaintyInMeters, year,
basisOfRecord, institutionCode, datasetName)
# Select columns of interest
gbif <- gbif %>% select(species, decimalLongitude, decimalLatitude, countryCode, individualCount,
gbifID, family, taxonRank, coordinateUncertaintyInMeters, year,
basisOfRecord, institutionCode)
View(gbif)
gbif <- gbif %>%
filter(!is.na(decimalLongitude))%>%
filter(!is.na(decimalLatitude))
gbif
wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
geom_point(data = gbif, aes(x = decimalLongitude, y = decimalLatitude),
colour = "darkred", size = 0.5)+
theme_bw()
#convert country code from ISO2c to ISO3c
gbif $countryCode <-  countrycode(dat$countryCode, origin =  'iso2c', destination = 'iso3c')
#convert country code from ISO2c to ISO3c
gbif$countryCode <-  countrycode(gbif$countryCode, origin =  'iso2c', destination = 'iso3c')
#flag problems
gbif <- data.frame(gbif)
flags <- clean_coordinates(x = gbif,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "countryCode",
species = "species",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "countries")) # most test are on by default
# Load libraries
install.packages("rnaturalearthdata")
library(rnaturalearthdata)
library(rnaturalearthdata)
#flag problems
gbif <- data.frame(gbif)
flags <- clean_coordinates(x = gbif,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "countryCode",
species = "species",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "countries")) # most test are on by default
summary(flags)
plot(flags, lon = "decimalLongitude", lat = "decimalLatitude")
View(gbif)
# Select only records in Brazil
gbif <- gbif %>% filter(countryCode == "BRA")
View(gbif)
plot(gbif, lon = "decimalLongitude", lat = "decimalLatitude")
wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
geom_point(data = gbif, aes(x = decimalLongitude, y = decimalLatitude),
colour = "darkred", size = 0.5)+
theme_bw()
idigbio <- read.csv("2frog_coordinates_IDIGBIO.csv")
names(idigbio)
vertnet <- read.csv("3frog_coordinates_VERTNET.csv")
library(rnaturalearthdata)
library(countrycode)
library(CoordinateCleaner)
library(dplyr)
library(ggplot2)
library(rgbif)
library(sp)
gbif <- read.csv("1frog_coordinates_GBIF.csv")
# Select columns of interest
gbif <- gbif %>% select(species, decimalLongitude, decimalLatitude, countryCode, individualCount,
gbifID, family, taxonRank, coordinateUncertaintyInMeters, year,
basisOfRecord, institutionCode)
# Select only data that has coordinates
gbif <- gbif %>%
filter(!is.na(decimalLongitude))%>%
filter(!is.na(decimalLatitude))
# Plot coordinates in world map
wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
geom_point(data = gbif, aes(x = decimalLongitude, y = decimalLatitude),
colour = "darkred", size = 0.5)+
theme_bw()
#convert country code from ISO2c to ISO3c
gbif$countryCode <-  countrycode(gbif$countryCode, origin =  'iso2c', destination = 'iso3c')
#flag problems
gbif <- data.frame(gbif)
flags <- clean_coordinates(x = gbif,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "countryCode",
species = "species",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "countries"))
summary(flags)
plot(flags, lon = "decimalLongitude", lat = "decimalLatitude")
# Select only records in Brazil
gbif <- gbif %>% filter(countryCode == "BRA")
View(gbif)
idigbio <- read.csv("2frog_coordinates_IDIGBIO.csv")
idigbio <- idigbio %>% select(dwc:scientificName, decimalLongitude, decimalLatitude, idigbio:isoCountryCode, dwc:individualCount,
gbifID, family, taxonRank, dwc:coordinateUncertaintyInMeters, year,
basisOfRecord, dwc:institutionCode)
idigbio <- idigbio %>% select(dwc:scientificName, decimalLongitude, decimalLatitude, idigbio:isoCountryCode, dwc:individualCount,
gbifID, family, taxonRank, dwc:coordinateUncertaintyInMeters, year,
basisOfRecord, dwc:institutionCode)
names(idigbio)
idigbio <- idigbio %>% select(dwc.scientificName, decimalLongitude, decimalLatitude, idigbio.isoCountryCode, dwc.individualCount,
gbifID, family, taxonRank, dwc.coordinateUncertaintyInMeters, year,
basisOfRecord, dwc.institutionCode)
idigbio <- read.csv("2frog_coordinates_IDIGBIO.csv")
idigbio <- idigbio %>% select(dwc.scientificName, decimalLongitude, decimalLatitude, idigbio.isoCountryCode, dwc.individualCount,
gbifID, family, taxonRank, dwc.coordinateUncertaintyInMeters, year,
basisOfRecord, dwc.institutionCode)
names(idigbio)
idigbio <- idigbio %>% select(dwc.scientificName, decimalLongitude, decimalLatitude, idigbio.isoCountryCode, dwc.individualCount,
coreid, family, taxonRank, dwc.coordinateUncertaintyInMeters, year,
basisOfRecord, dwc.institutionCode)
idigbio <- read.csv("2frog_coordinates_IDIGBIO.csv")
idigbio <- idigbio %>% select(dwc.scientificName, decimalLongitude, decimalLatitude, idigbio.isoCountryCode, dwc.individualCount,
coreid, dwc.taxonRank, dwc.coordinateUncertaintyInMeters, year,
dwc.basisOfRecord, dwc.institutionCode)
# Select only data that has coordinates
idigbio <- idigbio %>%
filter(!is.na(decimalLongitude))%>%
filter(!is.na(decimalLatitude))
# Plot coordinates in world map
wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
geom_point(data = idigbio, aes(x = decimalLongitude, y = decimalLatitude),
colour = "darkred", size = 0.5)+
theme_bw()
#convert country code from ISO2c to ISO3c
gbif$countryCode <-  countrycode(idigbio$countryCode, origin =  'iso2c', destination = 'iso3c')
names(idigbio)
#flag problems
idigbio <- data.frame(idigbio)
flags <- clean_coordinates(x = idigbio,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "idigbio.isoCountryCode",
species = "dwc.scientificName",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "countries"))
summary(flags)
plot(flags, lon = "decimalLongitude", lat = "decimalLatitude")
#flag problems
idigbio <- data.frame(idigbio)
flags <- clean_coordinates(x = idigbio,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "idigbio.isoCountryCode",
species = "dwc.scientificName",
tests = c("capitals", "centroids", "equal","institutions",
"zeros", "countries"))
summary(flags)
plot(flags, lon = "decimalLongitude", lat = "decimalLatitude")
#flag problems
idigbio <- data.frame(idigbio)
flags <- clean_coordinates(x = idigbio,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "idigbio.isoCountryCode",
species = "dwc.scientificName",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros"))
summary(flags)
plot(flags, lon = "decimalLongitude", lat = "decimalLatitude")
names(idigbio)
#convert country code from ISO2c to ISO3c
idigbio.isoCountryCode <-  countrycode(idigbio.isoCountryCode, origin =  'iso2c', destination = 'iso3c')
#convert country code from ISO2c to ISO3c
idigbio$idigbio.isoCountryCode <-  countrycode(idigbio$idigbio.isoCountryCode, origin =  'iso2c', destination = 'iso3c')
#flag problems
idigbio <- data.frame(idigbio)
#flag problems
idigbio <- data.frame(idigbio)
flags <- clean_coordinates(x = idigbio,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "idigbio.isoCountryCode",
species = "dwc.scientificName",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "country"))
summary(flags)
plot(flags, lon = "decimalLongitude", lat = "decimalLatitude")
#flag problems
idigbio <- data.frame(idigbio)
flags <- clean_coordinates(x = idigbio,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "idigbio.isoCountryCode",
species = "dwc.scientificName",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros", "countries"))
#flag problems
idigbio <- data.frame(idigbio)
flags <- clean_coordinates(x = idigbio,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "idigbio.isoCountryCode",
species = "dwc.scientificName",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros"))
summary(flags)
plot(flags, lon = "decimalLongitude", lat = "decimalLatitude")
flags <- cf_age(x = dat_cl,
lon = "decimalLongitude",
lat = "decimalLatitude",
taxon = "species",
min_age = "year",
max_age = "year",
value = "flagged")
flags <- cf_age(x = idigbio,
lon = "decimalLongitude",
lat = "decimalLatitude",
taxon = "dwc.scientificName",
min_age = "year",
max_age = "year",
value = "flagged")
idigbio[!flags, "year"]
idigbio <- idigbio[flags, ]
View(idigbio)
names(idigbio)
names(idigbio)
names(idigbio)
unique(dwc.scientificName)
unique(idigbio$dwc.scientificName)
sp_idigbio <- unique(idigbio$dwc.scientificName)
frog_tree <-read.newick(file="frog_newick.newick")
library(phytools)
frog_tree <-read.newick(file="frog_newick.newick")
frog_tree
sp_comp$idigbio <- unique(idigbio$dwc.scientificName)
sp_comp <- unique(idigbio$dwc.scientificName)
frog_tree <-read.newick(file="frog_newick.newick")
sp_comp$frog_tree <- frog_tree$tip.label
View(sp_comp)
sp_comp <- unique(idigbio$dwc.scientificName)
sp_comp <- unique(idigbio$dwc.scientificName)
View(sp_comp)
frog_tree$tip.label
as.vector(frog_tree$tip.label)
sp_comp$frog_tree <- as.vector(frog_tree$tip.label)
View(sp_comp)
sp_comp <- unique(idigbio$dwc.scientificName)
frog_tree <-read.newick(file="frog_newick.newick")
sp_tree <- as.vector(frog_tree$tip.label)
View(sp_tree)
sp_comp$frog_tree <- sp_tree
View(sp_comp)
sp_tree <- names(frog_tree$tip.label)
View(sp_tree)
sp_tree <- unique(frog_tree$tip.label)
View(sp_tree)
str(sp_tree)
sp_comp <- unique(idigbio$dwc.scientificName)
frog_tree <-read.newick(file="frog_newick.newick")
sp_tree <- unique(frog_tree$tip.label)
sp_comp$frog_tree <- sp_tree
View(sp_comp)
head(sp_tree)
names(sp_tree)
is.vector(sp_tree)
sp_comp <- unique(idigbio$dwc.scientificName)
sp_tree <- unique(frog_tree$tip.label)
is.data.frame(sp_comp)
sp_comp <- as.data.frame(unique(idigbio$dwc.scientificName))
is.data.frame(sp_comp)
sp_comp <- as.data.frame(unique(idigbio$dwc.scientificName))
sp_tree <- unique(frog_tree$tip.label)
sp_comp$frog_tree <- sp_tree
frog_tree <-read.newick(file="frog_newick.newick")
sp_comp <- as.data.frame(unique(frog_tree$tip.label))
is.data.frame(sp_comp)
sp_comp$idigbio <- unique(idigbio$dwc.scientificName)
sp_tree <- as.data.frame(unique(frog_tree$tip.label))
sp_idigbio <- unique(idigbio$dwc.scientificName)
sp_tree
sp_idigbio
library(stringr)
sp_idigbio <- word(sp_idigbio, 1,2, sep="_")
View(sp_idigbio)
word(sp_idigbio, 1,2, sep="_")
sp_idigbio <- unique(idigbio$dwc.scientificName)
sp_idigbio
word(sp_idigbio, 1,2, sep="_")
sp_idigbio <- unique(idigbio$dwc.scientificName)
str_extract(sp_idigbio, "[^_]+_[^_]+")
sp_idigbio <- unique(idigbio$dwc.scientificName)
word(sp_idigbio, 1,2, sep=" ")
sp_idigbio <- unique(idigbio$dwc.scientificName)
View(sp_idigbio)
sp_idigbio_cl <- word(sp_idigbio, 1,2, sep=" ")
sp_idigbio <- unique(idigbio$dwc.scientificName)
View(sp_idigbio)
View(sp_idigbio_cl)
sp_idigbio_filter <- filter(sp_idigbio, !grepl("sp."))
is.vector(sp_idigbio)
sp_idigbio[!grepl("sp.", sp_idigbio)]
sp_idigbio[!grepl(c("sp.", "aff.", "cf."), sp_idigbio)]
sp_idigbio[!grepl(c("sp.", "aff.", "cf."), sp_idigbio)]
sp_idigbio <- unique(idigbio$dwc.scientificName)
sp_idigbio[!grepl(c("sp.", "aff.", "cf."), sp_idigbio)]
sp_idigbio <- unique(idigbio$dwc.scientificName)
length(sp_idigbio)
sp_idigbio[!grepl("sp.", sp_idigbio)]
length(sp_idigbio)
sp_idigbio[!grepl("aff.", sp_idigbio)]
sp_idigbio <- unique(idigbio$dwc.scientificName)
sp_idigbio[!sp_idigbio %in% grep(c("sp.", "aff.", "cf."), sp_idigbio)]
sp_idigbio[!sp_idigbio %in% grep(c("sp." | "aff." | "cf."), sp_idigbio)]
sp_idigbio[!sp_idigbio %in% grep(c("sp." & "aff." & "cf."), sp_idigbio)]
sp_idigbio[!grepl("sp." | "aff.", sp_idigbio)]
sp_idigbio[!grepl("sp.", "aff.", sp_idigbio)]
sp_idigbio[!grepl("sp.", sp_idigbio)]
names(idigbio)
View(idigbio)
idigbio <- idigbio %>% filter(!grepl("sp.", dwc.scientificName))
View(idigbio)
idigbio <- idigbio %>% filter(!grepl("sp.|aff.|cf.", dwc.scientificName))
idigbio <- idigbio %>% filter(!grepl("sp.|aff.|cf.", dwc.scientificName))
unique(idigbio$dwc.scientificName)
nrow(idigbio)
idigbio[sapply(strsplit(as.character(idigbio$dwc.scientificName)," "),length)<2,]
nrow(idigbio)
View(idigbio)
sp_idigbio_cl <- word(idigbio$dwc.scientificName, 1,2, sep=" ")
View
View(sp_idigbio_cl)
idigbio$species <- word(idigbio$dwc.scientificName, 1,2, sep=" ")
View(idigbio)
idigbio <- idigbio %>%
filter(!is.na(species))
# Plot coordinates in world map
wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
geom_point(data = idigbio, aes(x = decimalLongitude, y = decimalLatitude),
colour = "darkred", size = 0.5)+
theme_bw()
#flag problems
idigbio <- data.frame(idigbio)
flags <- clean_coordinates(x = idigbio,
lon = "decimalLongitude",
lat = "decimalLatitude",
countries = "idigbio.isoCountryCode",
species = "species",
tests = c("capitals", "centroids", "equal","gbif", "institutions",
"zeros"))
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
capitalize(idigbio$species)
idigbio$species <- sub(" ", "_", idigbio$species)
idigbio$species <- capitalize(idigbio$species)
idigbio$species <- sub(" ", "_", idigbio$species)
View(idigbio)
frog_tree <-read.newick(file="frog_newick.newick")
sp_tree <- as.data.frame(unique(frog_tree$tip.label))
sp_idigbio <- unique(idigbio$dwc.scientificName)
?duplicated
unique(c[sp_tree%in%sp_idigbio)
unique(c[sp_tree%in%sp_idigbio])
tst <- c(unique(sp_tree),unique(sp_idigbio))
View(tst)
names(sp_tree)
is.vector(sp_tree)
sp_tree <- as.vector(unique(frog_tree$tip.label))
sp_idigbio <- unique(idigbio$dwc.scientificName)
tst <- c(unique(sp_tree),unique(sp_idigbio))
View(tst)
sp_tree <- as.data.frame(unique(frog_tree$tip.label))
sp_idigbio <- unique(idigbio$dwc.scientificName)
duplicated.data.frame(sp_tree, sp_idigbio)
duplicated.data.frame(sp_tree, sp_idigbio, imcomparables= FALSE )
sp_tree %in% sp_idigbio
sp_tree <- as.vector(unique(frog_tree$tip.label))
sp_idigbio <- unique(idigbio$dwc.scientificName)
sp_tree %in% sp_idigbio
sp_tree
sp_idigbio
sp_idigbio <- unique(idigbio$species)
sp_idigbio
sp_tree %in% sp_idigbio
sp_tree <- as.data.frame(unique(frog_tree$tip.label))
sp_idigbio <- unique(idigbio$species)
sp_tree[1,] %in% sp_idigbio
sp_tree[,1] %in% sp_idigbio
sp_tree$duplicate <- sp_tree[,1] %in% sp_idigbio
View(sp_tree)
sp_idigbio
?drop.tip
?match
idigbio$species %in% sp_idigbio
match(idigbio$species, sp_idigbio)
!match(idigbio$species, sp_idigbio)
match(idigbio$species, sp_idigbio)
sp_idigbio %in% sp_tree[,1]
sp_idigbio %in% sp_tree[,1]
write.csv(idigbio, "idigbio.csv")
View(sp_tree)
sp_tree <- sp_tree %>% filter(duplicate == "TRUE")
View(sp_tree)
names(sp_tree)
sp_tree %>% rename(species = unique(frog_tree$tip.label))
sp_tree %>% rename(unique(frog_tree$tip.label = species))
sp_tree %>% rename("unique(frog_tree$tip.label" = "species"))
sp_tree %>% rename("unique(frog_tree$tip.label)" = "species")
sp_tree %>% rename(species = "unique(frog_tree$tip.label)")
View(sp_tree)
sp_tree <- sp_tree %>% rename(species = "unique(frog_tree$tip.label)")
View(sp_tree)
?drop.tip
sp_not_in_idig_bio <- sp_tree %>% filter(duplicate == "FALSE")
View(sp_not_in_idig_bio)
frog_tree <-read.newick(file="frog_newick.newick")
sp_tree <- as.data.frame(unique(frog_tree$tip.label))
sp_tree <- sp_tree %>% rename(species = "unique(frog_tree$tip.label)")
sp_idigbio <- unique(idigbio$species)
sp_tree$duplicate <- sp_tree[,1] %in% sp_idigbio
sp_not_in_idig_bio <- sp_tree %>% filter(duplicate == "FALSE")
View(sp_not_in_idig_bio)
tips_to_drop <- as.vector(sp_not_in_idig_bio$species)
tree_frog = read.tree(text=frog_tree)
tree_frog = read.tree(frog_tree)
frog_tree <-read.newick(file="frog_newick.newick")
tree_frog = read.tree(frog_tree)
str(frog_tree)
frog_tree_reduced = drop.tip(frog_tree, tips_to_drop)
plot(frog_tree_reduced)
str(frog_tree_reduced)
sp_in_both <- sp_tree %>% filter(duplicate == "TRUE")
frog_tree_reduced$tip.label %in% sp_in_both
sp_in_both <- sp_tree %>% filter(duplicate == "TRUE")
frog_tree_reduced$tip.label %in% sp_in_both
frog_tree_reduced$tip.label %in% sp_in_both[,1]
frog_biomes <- read.csv("Frog_biomes_QGIS_atribute_table.csv")
View(frog_biomes)
frog_biomes$duplicate <- frog_biomes[,1] %in% sp_tree
View(frog_biomes)
str(sp_tree)
frog_biomes$duplicate <- frog_biomes$species %in% sp_tree$species
View(frog_biomes)
unique(sp_tree$species)
sp_in_both
frog_biomes$duplicate <- frog_biomes$species %in% sp_in_both$species
View(frog_biomes)
frog_biomes <- frog_biomes %>% filter(duplicate == "TRUE")
View(frog_biomes)
names(frog_biomes)
head(frog_biomes)
frog_biomes %>%
frog_biomes %>%  group_by(species) %>%
summarise(biome = paste(unique(name), collapse = ', '))
summary_biomes <- frog_biomes %>% group_by(species) %>%
summarise(biome = paste(unique(name), collapse = ', '))
View(summary_biomes)
# Write csv
write.csv(summary_biomes, "summary_biomes_per_species.csv")
